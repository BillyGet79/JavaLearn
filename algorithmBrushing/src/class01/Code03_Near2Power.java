package class01;

/**
 * 题目3
 * 给定一个非负整数num，
 * 如何不用循环语句
 * 返回>=num，并且离num最近的，2的某次方
 */
public class Code03_Near2Power {

    //这道题首先要理解的就是将数视为二进制进行解答
    //理解了中间步骤之后，自己可以举几个例子用笔实践一下来理解这段代码在干什么
    //例如n=13，其二进制为00001101，-1之后变成00001100，最高位后面全部变成1，得到00001111，+1之后变成00010000，这刚好是16，得到最终结果

    public static int tableSizeFor(int n) {
        //至于为什么一定要--，是为了解决给定的num刚好为2的某次方，这样--之后二进制表示时就全为1，最后+1之后刚好得到原来的数
        n--;
        //下面这个操作要好好理解，可以举例随意一个二进制数来进行操作
        //由于int类型的数据为32位
        //所以在执行下面的操作后，从最高位的1开始右面的所有二进制位全部变为1
        //如果是long类型的数据，那么就需要在后面再加一步：n |= n >>> 32;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : n + 1;
    }

    public static void main(String[] args) {
        int cap = 120;
        System.out.println(tableSizeFor(cap));
    }

}

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化还礼，理解sql隔离
注意：使用mapper代理方法开发，namespace由特殊重要的作用
-->
<mapper namespace="test">
<!--    在映射文件中配置很多sql语句-->
<!--    需求：通过id查询用户表的记录-->
<!--    通过select执行数据库查询
id：标识映射文件中的sql，称为statement的id
将sql语句封装到mapperStatement对象中，所以将id沉稳给statement的id
#{}表示一个占位符
parameterType:指定输入参数的类型
#{id}：其中的id标识接收输入的参数，参数的名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其他名称
resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象
-->
    <select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User">
        select * from user where id = #{id}
    </select>
<!--    根据用户名称模糊查询用户信息，可能返回多条
resultType：指定就是单条记录所映射的java对象类型
${}：表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
但是使用${}拼接sql，引起sql注入
${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.itcast.mybatis.po.User">
        select * from user where username like '%${value}%';
    </select>
<!--    添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
        -->
    <insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
        # 将插入数据的主键返回，返回到user对象中
        # select LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键
        # keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
        # order：select LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
        # resultType：指定结果类型
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username, birthday, sex, address) values(#{username}, #{birthday}, #{sex}, #{address})
    </insert>

</mapper>

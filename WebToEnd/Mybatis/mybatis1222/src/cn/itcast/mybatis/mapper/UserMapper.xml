<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace由特殊重要的作用，namespace等于mapper接口地址
-->
<mapper namespace="cn.itcast.mybatis.mapper.UserMapper">

<!--    开启本mapper的namespace下的二级缓存-->
<!--    type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache
        要和ehcache整合，需要配置type为ehcache实现cache接口的类型-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
<!--    定义sql片段
        id：sql片段的唯一标识
        经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高
        在sql片段中不要包括where-->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>
        </if>
        <if test="ids != null">
<!--        使用foreach遍历传入ids
            collection：指定输入对象中集合属性
            item：每个遍历生成对象中
            open：开始遍历时拼接串
            close：结束遍历时拼接的串
            separator：遍历的两个对象中需要拼接的串-->
<!--        使用实现下边的sql拼接：
            and id=1 or id=10 or id=16-->
            <foreach collection="ids" item="user_id" open="and (" close=")" separator="or">
<!--            每次遍历所要拼接的串-->
                id = #{user_id}
            </foreach>
        </if>
    </sql>
<!--    定义resultMap
        将select id id_, username username_ from user 和user类中的属性做一个映射关系
        type:resultMap最终映射的java对象类型，可以使用别名
        id:对resultMap的唯一标识-->
    <resultMap id="userResultMap" type="User">
<!--        id表示查询结果集中唯一标识
            column：查询出来的列名
            property:type指定的pojo中的属性名
            最终resultMap对column和property做一个映射关系-->
        <id column="id_" property="id"/>
<!--        result：对普通名映射定义
            column：查询出来的列名
            property:type指定的pojo中的属性名
            最终resultMap对column和property做一个映射关系-->
        <result column="username_" property="username"/>
    </resultMap>

<!--    在映射文件中配置很多sql语句-->
    <!--    用户信息的综合查询
        #{userCustom.sex}：取出pojo包装对象中的性别值
        ${userCustom.username}：取出pojo包装对象中用户名称-->
    <select id="findUserList" parameterType="UserQueryVo" resultType="UserCustom">
        select * from user
--         where可以自动去掉田间中的第一个and
        <where>
            <include refid="query_user_where"/>
        </where>
    </select>
<!--    用户信息综合查询总数-->
    <select id="findUserCount" parameterType="UserQueryVo" resultType="int">
        select count(*) from user where user.sex = #{userCustom.sex} and user.username like '%${userCustom.username}%'
    </select>
<!--    使用resultMap进行输出映射-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_, username username_ from user where id = #{value}
    </select>
<!--    需求：通过id查询用户表的记录-->
<!--    通过select执行数据库查询
id：标识映射文件中的sql，称为statement的id
将sql语句封装到mapperStatement对象中，所以将id沉稳给statement的id
#{}表示一个占位符
parameterType:指定输入参数的类型
#{id}：其中的id标识接收输入的参数，参数的名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其他名称
resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象
-->
    <select id="findUserById" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>
<!--    根据用户名称模糊查询用户信息，可能返回多条
resultType：指定就是单条记录所映射的java对象类型
${}：表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
但是使用${}拼接sql，引起sql注入
${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="User">
        select * from user where username like '%${value}%';
    </select>
<!--    添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
        -->
    <insert id="insertUser" parameterType="User">
--         将插入数据的主键返回，返回到user对象中
--         select LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键
--         keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
--         order：select LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
--         resultType：指定结果类型
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username, birthday, sex, address) values(#{username}, #{birthday}, #{sex}, #{address})
--         使用mysql的uuid()生成主键
--         执行过程
--         首先通过uuid()得到主键，将主键设置到user对象的id属性中
--         其次在insert执行时，从user对象中取出id属性值
<!--        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
<!--            select uuid()-->
<!--        </selectKey>-->
<!--        insert into user(id, username, birthday, sex, address) values(#{id}, #{username}, #{birthday}, #{sex}, #{address})-->
    </insert>

<!--    删除用户
    根据id删除用户，需要输入id值-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{id}
    </delete>

<!--    更新用户
    分析：
    需要传入用户的id
    需要传入用户的更新信息
    parameterType指定user对象，包括id和更新信息，注意：id必须存在-->
    <update id="updateUser" parameterType="User">
        update user set username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address} where id = #{id}
    </update>

<!--    传递pojo对象总和查询用户信息-->
    <select id="findUserByUser" parameterType="User" resultType="User">
        select * from user where id=#{id} and username like '%${username}%'
    </select>

</mapper>
